/*
 * This file is generated by jOOQ.
 */
package com.nohibernate.demo.jooq.tables;


import com.nohibernate.demo.jooq.tables.records.AccountToPolicyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountToPolicy extends TableImpl<AccountToPolicyRecord> {

    private static final long serialVersionUID = 1775831654;

    /**
     * The reference instance of <code>public.account_to_policy</code>
     */
    public static final AccountToPolicy ACCOUNT_TO_POLICY = new AccountToPolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountToPolicyRecord> getRecordType() {
        return AccountToPolicyRecord.class;
    }

    /**
     * The column <code>public.account_to_policy.id</code>.
     */
    public final TableField<AccountToPolicyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('account_to_policy_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.account_to_policy.policy_id</code>.
     */
    public final TableField<AccountToPolicyRecord, Long> POLICY_ID = createField("policy_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.account_to_policy.account_id</code>.
     */
    public final TableField<AccountToPolicyRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.account_to_policy</code> table reference
     */
    public AccountToPolicy() {
        this(DSL.name("account_to_policy"), null);
    }

    /**
     * Create an aliased <code>public.account_to_policy</code> table reference
     */
    public AccountToPolicy(String alias) {
        this(DSL.name(alias), ACCOUNT_TO_POLICY);
    }

    /**
     * Create an aliased <code>public.account_to_policy</code> table reference
     */
    public AccountToPolicy(Name alias) {
        this(alias, ACCOUNT_TO_POLICY);
    }

    private AccountToPolicy(Name alias, Table<AccountToPolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountToPolicy(Name alias, Table<AccountToPolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AccountToPolicy(Table<O> child, ForeignKey<O, AccountToPolicyRecord> key) {
        super(child, key, ACCOUNT_TO_POLICY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ID, Indexes.U_ACCOUNT_TO_POLICY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountToPolicyRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_TO_POLICY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountToPolicyRecord> getPrimaryKey() {
        return Keys.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountToPolicyRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountToPolicyRecord>>asList(Keys.ID, Keys.U_ACCOUNT_TO_POLICY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountToPolicy as(String alias) {
        return new AccountToPolicy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountToPolicy as(Name alias) {
        return new AccountToPolicy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountToPolicy rename(String name) {
        return new AccountToPolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountToPolicy rename(Name name) {
        return new AccountToPolicy(name, null);
    }
}
